(undo-tree-save-format-version . 1)
"56eb2f19b7577d6363c40d53e850a0a9f2fb7405"
[nil nil nil nil (26855 53630 297923 383000) 0 nil]
([nil nil ((1 . 9216) (t . -1)) nil (26855 53630 297920 68000) 0 nil])
([nil nil ((410 . 411) (t 26855 53630 310415 765000)) nil (26855 58210 473224 386000) 0 nil])
([nil nil ((411 . 473)) nil (26855 58210 473223 783000) 0 nil])
([nil nil (("
" . -472) (undo-tree-id0 . -1) 473) nil (26855 58210 473221 213000) 0 nil])
([nil nil (("package com.example.jpverbflashcards

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.spring
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.*
import kotlin.random.Random

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent { App() }
    }
}

/** Data model for a verb card. Front shows stem (ます-stem). */
data class VerbCard(
    val dictionary: String,  // 辞書形
    val stem: String,        // ます-stem (連用形)
    val meaningEn: String,
    val masu: String,
    val te: String,
    val ta: String,
    val nai: String,
)

/** Sample deck. (Add your own or load from file later.) */
val SampleDeck = listOf(
    VerbCard(\"行く\", \"行き\", \"to go\", \"行きます\", \"行って\", \"行った\", \"行かない\"),
    VerbCard(\"来る\", \"来（き）\", \"to come\", \"来ます\", \"来て\", \"来た\", \"来ない\"),
    VerbCard(\"する\", \"し\", \"to do\", \"します\", \"して\", \"した\", \"しない\"),
    VerbCard(\"食べる\", \"食べ\", \"to eat\", \"食べます\", \"食べて\", \"食べた\", \"食べない\"),
    VerbCard(\"見る\", \"見\", \"to see / watch\", \"見ます\", \"見て\", \"見た\", \"見ない\"),
    VerbCard(\"読む\", \"読み\", \"to read\", \"読みます\", \"読んで\", \"読んだ\", \"読まない\"),
    VerbCard(\"書く\", \"書き\", \"to write\", \"書きます\", \"書いて\", \"書いた\", \"書かない\"),
    VerbCard(\"話す\", \"話し\", \"to speak\", \"話します\", \"話して\", \"話した\", \"話さない\"),
    VerbCard(\"聞く\", \"聞き\", \"to listen / ask\", \"聞きます\", \"聞いて\", \"聞いた\", \"聞かない\"),
    VerbCard(\"飲む\", \"飲み\", \"to drink\", \"飲みます\", \"飲んで\", \"飲んだ\", \"飲まない\"),
    VerbCard(\"買う\", \"買い\", \"to buy\", \"買います\", \"買って\", \"買った\", \"買わない\"),
    VerbCard(\"会う\", \"会い\", \"to meet\", \"会います\", \"会って\", \"会った\", \"会わない\"),
    VerbCard(\"歩く\", \"歩き\", \"to walk\", \"歩きます\", \"歩いて\", \"歩いた\", \"歩かない\"),
    VerbCard(\"走る\", \"走り\", \"to run\", \"走ります\", \"走って\", \"走った\", \"走らない\"),
    VerbCard(\"寝る\", \"寝\", \"to sleep\", \"寝ます\", \"寝て\", \"寝た\", \"寝ない\"),
    VerbCard(\"起きる\", \"起き\", \"to wake up\", \"起きます\", \"起きて\", \"起きた\", \"起きない\"),
    VerbCard(\"入る\", \"入り\", \"to enter\", \"入ります\", \"入って\", \"入った\", \"入らない\"),
    VerbCard(\"出る\", \"出\", \"to leave / go out\", \"出ます\", \"出て\", \"出た\", \"出ない\"),
    VerbCard(\"使う\", \"使い\", \"to use\", \"使います\", \"使って\", \"使った\", \"使わない\"),
)

@Composable
fun App() {
    MaterialTheme(colorScheme = darkColorScheme()) {
        Surface(modifier = Modifier.fillMaxSize()) {
            FlashcardScreen(deck = SampleDeck)
        }
    }
}

@Composable
fun FlashcardScreen(deck: List<VerbCard>) {
    // State for current/previous card and face
    var currentIndex by remember { mutableStateOf(Random.nextInt(deck.size)) }
    var previousIndex by remember { mutableStateOf<Int?>(null) }
    var isFlipped by remember { mutableStateOf(false) }

    fun nextRandomCard() {
        previousIndex = currentIndex
        currentIndex = Random.nextInt(deck.size) // with replacement
        isFlipped = false
    }

    fun goPreviousCard() {
        // Toggle back to previous if available (swap so left/right can bounce)
        previousIndex?.let { prev ->
            val tmp = currentIndex
            currentIndex = prev
            previousIndex = tmp
            isFlipped = false
        }
    }

    val card = deck[currentIndex]

    // Swipe handling
    val swipeThresholdPx = with(LocalDensity.current) { 64.dp.toPx() }
    var dragX by remember { mutableStateOf(0f) }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF0E0E11))
            .pointerInput(Unit) {
                detectDragGestures(
                    onDrag = { change, dragAmount ->
                        change.consume()
                        dragX += dragAmount.x
                    },
                    onDragEnd = {
                        when {
                            dragX > swipeThresholdPx -> nextRandomCard() // swipe right
                            dragX < -swipeThresholdPx -> goPreviousCard() // swipe left
                        }
                        dragX = 0f
                    },
                    onDragCancel = { dragX = 0f }
                )
            },
        contentAlignment = Alignment.Center
    ) {
        Flashcard(
            card = card,
            isFlipped = isFlipped,
            onTap = { isFlipped = !isFlipped }
        )

        // Tiny HUD / helpers
        Column(
            Modifier
                .align(Alignment.BottomCenter)
                .padding(bottom = 24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = \"Tap = flip • Swipe → = next • Swipe ← = previous\",
                color = Color(0xFF9AA0A6),
                fontSize = 14.sp
            )
        }
    }
}

@Composable
fun Flashcard(
    card: VerbCard,
    isFlipped: Boolean,
    onTap: () -> Unit
) {
    // Flip animation: 0 → 180 deg
    val rotation by animateFloatAsState(
        targetValue = if (isFlipped) 180f else 0f,
        animationSpec = spring(stiffness = Spring.StiffnessMediumLow),
        label = \"flip\"
    )

    val cameraDistance = 16 * Density(1f).density // bump to avoid perspective distortion

    Box(
        modifier = Modifier
            .padding(24.dp)
            .fillMaxWidth()
            .aspectRatio(0.66f) // card-ish
            .clip(RoundedCornerShape(24.dp))
            .graphicsLayer {
                rotationY = rotation
                this.cameraDistance = cameraDistance
            }
            .background(Color(0xFF1C1F24))
            .pointerInput(Unit) {
                // Simple tap to flip
                detectTap { onTap() }
            },
        contentAlignment = Alignment.Center
    ) {
        // Front
        if (rotation <= 90f) {
            FrontFace(card)
        } else {
            // Back (mirror so text isn't reversed)
            Box(
                modifier = Modifier.graphicsLayer {
                    rotationY = 180f
                }
            ) {
                BackFace(card)
            }
        }
    }
}

/** Simple tap detector without long-press or double tap. */
suspend fun androidx.compose.ui.input.pointer.PointerInputScope.detectTap(onTap: () -> Unit) {
    detectDragGestures(
        onDragStart = { /* ignore drag start for taps */ },
        onDragEnd = { /* ignore */ },
        onDragCancel = { /* ignore */ },
        onDrag = { change, _ ->
            // We treat a very small press-release as tap; however, better to use detectTapGestures.
            // Use detectTapGestures to be precise:
        }
    )
}

/** Prefer detectTapGestures: */
@Composable
private fun Modifier.detectTap(onTap: () -> Unit): Modifier =
    pointerInput(Unit) {
        androidx.compose.foundation.gestures.detectTapGestures(
            onTap = { onTap() }
        )
    }

@Composable
fun FrontFace(card: VerbCard) {
    Column(
        Modifier
            .fillMaxSize()
            .background(Color(0xFF28303A))
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(\"ます-stem\", color = Color(0xFF9AA0A6), fontSize = 18.sp)
        Spacer(Modifier.height(8.dp))
        Text(
            text = card.stem,
            color = Color.White,
            fontSize = 64.sp,
            lineHeight = 64.sp,
            textAlign = TextAlign.Center,
            fontWeight = FontWeight.Bold
        )
        Spacer(Modifier.height(16.dp))
        Text(
            text = \"（${card.dictionary}）\",
            color = Color(0xFFB0BEC5),
            fontSize = 22.sp
        )
    }
}

@Composable
fun BackFace(card: VerbCard) {
    Column(
        Modifier
            .fillMaxSize()
            .background(Color(0xFF21262C))
            .padding(24.dp),
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = card.meaningEn,
            color = Color.White,
            fontSize = 26.sp,
            fontWeight = FontWeight.SemiBold
        )
        Spacer(Modifier.height(16.dp))
        Entry(\"辞書形\", card.dictionary)
        Entry(\"ます形\", card.masu)
        Entry(\"て形\", card.te)
        Entry(\"た形\", card.ta)
        Entry(\"ない形\", card.nai)
    }
}

@Composable
private fun Entry(label: String, value: String) {
    Row(Modifier.fillMaxWidth().padding(vertical = 6.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(label, color = Color(0xFF9AA0A6), fontSize = 18.sp)
        Text(value, color = Color(0xFFECEFF1), fontSize = 20.sp, fontWeight = FontWeight.Medium)
    }
}
" . -1) (undo-tree-id0 . -9277) (undo-tree-id1 . -8419) (undo-tree-id2 . -9277) 9278 (t 26855 58210 474838 132000)) nil (26855 58838 535729 495000) 0 nil])
([nil nil ((1 . 8176)) nil (26855 58838 535718 471000) 0 nil])
([nil nil ((5620 . 5625) (t 26855 58838 539572 127000)) nil (26855 58948 893630 814000) 0 nil])
([nil nil ((5625 . 5690)) nil (26855 58948 893630 288000) 0 nil])
([nil current (("    val cameraDistance = 16 * Density(1f).density
" . -5571) (undo-tree-id0 . -50) (undo-tree-id1 . -49) (undo-tree-id2 . -49) (undo-tree-id3 . -49) (undo-tree-id4 . -49) (undo-tree-id5 . -49) (undo-tree-id6 . 1) 5621) nil (26855 58948 893627 727000) 0 nil])
nil

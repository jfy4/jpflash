(undo-tree-save-format-version . 1)
"0b3ab4839c0b9b590e641dc70b45e08e810b3f48"
[nil nil nil nil (26855 53630 297923 383000) 0 nil]
([nil nil ((1 . 9216) (t . -1)) nil (26855 53630 297920 68000) 0 nil])
([nil nil ((410 . 411) (t 26855 53630 310415 765000)) nil (26855 58210 473224 386000) 0 nil])
([nil nil ((411 . 473)) nil (26855 58210 473223 783000) 0 nil])
([nil nil (("
" . -472) (undo-tree-id0 . -1) 473) nil (26855 58210 473221 213000) 0 nil])
([nil nil (("package com.example.jpverbflashcards

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.spring
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.*
import kotlin.random.Random

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent { App() }
    }
}

/** Data model for a verb card. Front shows stem (ます-stem). */
data class VerbCard(
    val dictionary: String,  // 辞書形
    val stem: String,        // ます-stem (連用形)
    val meaningEn: String,
    val masu: String,
    val te: String,
    val ta: String,
    val nai: String,
)

/** Sample deck. (Add your own or load from file later.) */
val SampleDeck = listOf(
    VerbCard(\"行く\", \"行き\", \"to go\", \"行きます\", \"行って\", \"行った\", \"行かない\"),
    VerbCard(\"来る\", \"来（き）\", \"to come\", \"来ます\", \"来て\", \"来た\", \"来ない\"),
    VerbCard(\"する\", \"し\", \"to do\", \"します\", \"して\", \"した\", \"しない\"),
    VerbCard(\"食べる\", \"食べ\", \"to eat\", \"食べます\", \"食べて\", \"食べた\", \"食べない\"),
    VerbCard(\"見る\", \"見\", \"to see / watch\", \"見ます\", \"見て\", \"見た\", \"見ない\"),
    VerbCard(\"読む\", \"読み\", \"to read\", \"読みます\", \"読んで\", \"読んだ\", \"読まない\"),
    VerbCard(\"書く\", \"書き\", \"to write\", \"書きます\", \"書いて\", \"書いた\", \"書かない\"),
    VerbCard(\"話す\", \"話し\", \"to speak\", \"話します\", \"話して\", \"話した\", \"話さない\"),
    VerbCard(\"聞く\", \"聞き\", \"to listen / ask\", \"聞きます\", \"聞いて\", \"聞いた\", \"聞かない\"),
    VerbCard(\"飲む\", \"飲み\", \"to drink\", \"飲みます\", \"飲んで\", \"飲んだ\", \"飲まない\"),
    VerbCard(\"買う\", \"買い\", \"to buy\", \"買います\", \"買って\", \"買った\", \"買わない\"),
    VerbCard(\"会う\", \"会い\", \"to meet\", \"会います\", \"会って\", \"会った\", \"会わない\"),
    VerbCard(\"歩く\", \"歩き\", \"to walk\", \"歩きます\", \"歩いて\", \"歩いた\", \"歩かない\"),
    VerbCard(\"走る\", \"走り\", \"to run\", \"走ります\", \"走って\", \"走った\", \"走らない\"),
    VerbCard(\"寝る\", \"寝\", \"to sleep\", \"寝ます\", \"寝て\", \"寝た\", \"寝ない\"),
    VerbCard(\"起きる\", \"起き\", \"to wake up\", \"起きます\", \"起きて\", \"起きた\", \"起きない\"),
    VerbCard(\"入る\", \"入り\", \"to enter\", \"入ります\", \"入って\", \"入った\", \"入らない\"),
    VerbCard(\"出る\", \"出\", \"to leave / go out\", \"出ます\", \"出て\", \"出た\", \"出ない\"),
    VerbCard(\"使う\", \"使い\", \"to use\", \"使います\", \"使って\", \"使った\", \"使わない\"),
)

@Composable
fun App() {
    MaterialTheme(colorScheme = darkColorScheme()) {
        Surface(modifier = Modifier.fillMaxSize()) {
            FlashcardScreen(deck = SampleDeck)
        }
    }
}

@Composable
fun FlashcardScreen(deck: List<VerbCard>) {
    // State for current/previous card and face
    var currentIndex by remember { mutableStateOf(Random.nextInt(deck.size)) }
    var previousIndex by remember { mutableStateOf<Int?>(null) }
    var isFlipped by remember { mutableStateOf(false) }

    fun nextRandomCard() {
        previousIndex = currentIndex
        currentIndex = Random.nextInt(deck.size) // with replacement
        isFlipped = false
    }

    fun goPreviousCard() {
        // Toggle back to previous if available (swap so left/right can bounce)
        previousIndex?.let { prev ->
            val tmp = currentIndex
            currentIndex = prev
            previousIndex = tmp
            isFlipped = false
        }
    }

    val card = deck[currentIndex]

    // Swipe handling
    val swipeThresholdPx = with(LocalDensity.current) { 64.dp.toPx() }
    var dragX by remember { mutableStateOf(0f) }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF0E0E11))
            .pointerInput(Unit) {
                detectDragGestures(
                    onDrag = { change, dragAmount ->
                        change.consume()
                        dragX += dragAmount.x
                    },
                    onDragEnd = {
                        when {
                            dragX > swipeThresholdPx -> nextRandomCard() // swipe right
                            dragX < -swipeThresholdPx -> goPreviousCard() // swipe left
                        }
                        dragX = 0f
                    },
                    onDragCancel = { dragX = 0f }
                )
            },
        contentAlignment = Alignment.Center
    ) {
        Flashcard(
            card = card,
            isFlipped = isFlipped,
            onTap = { isFlipped = !isFlipped }
        )

        // Tiny HUD / helpers
        Column(
            Modifier
                .align(Alignment.BottomCenter)
                .padding(bottom = 24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = \"Tap = flip • Swipe → = next • Swipe ← = previous\",
                color = Color(0xFF9AA0A6),
                fontSize = 14.sp
            )
        }
    }
}

@Composable
fun Flashcard(
    card: VerbCard,
    isFlipped: Boolean,
    onTap: () -> Unit
) {
    // Flip animation: 0 → 180 deg
    val rotation by animateFloatAsState(
        targetValue = if (isFlipped) 180f else 0f,
        animationSpec = spring(stiffness = Spring.StiffnessMediumLow),
        label = \"flip\"
    )

    val cameraDistance = 16 * Density(1f).density // bump to avoid perspective distortion

    Box(
        modifier = Modifier
            .padding(24.dp)
            .fillMaxWidth()
            .aspectRatio(0.66f) // card-ish
            .clip(RoundedCornerShape(24.dp))
            .graphicsLayer {
                rotationY = rotation
                this.cameraDistance = cameraDistance
            }
            .background(Color(0xFF1C1F24))
            .pointerInput(Unit) {
                // Simple tap to flip
                detectTap { onTap() }
            },
        contentAlignment = Alignment.Center
    ) {
        // Front
        if (rotation <= 90f) {
            FrontFace(card)
        } else {
            // Back (mirror so text isn't reversed)
            Box(
                modifier = Modifier.graphicsLayer {
                    rotationY = 180f
                }
            ) {
                BackFace(card)
            }
        }
    }
}

/** Simple tap detector without long-press or double tap. */
suspend fun androidx.compose.ui.input.pointer.PointerInputScope.detectTap(onTap: () -> Unit) {
    detectDragGestures(
        onDragStart = { /* ignore drag start for taps */ },
        onDragEnd = { /* ignore */ },
        onDragCancel = { /* ignore */ },
        onDrag = { change, _ ->
            // We treat a very small press-release as tap; however, better to use detectTapGestures.
            // Use detectTapGestures to be precise:
        }
    )
}

/** Prefer detectTapGestures: */
@Composable
private fun Modifier.detectTap(onTap: () -> Unit): Modifier =
    pointerInput(Unit) {
        androidx.compose.foundation.gestures.detectTapGestures(
            onTap = { onTap() }
        )
    }

@Composable
fun FrontFace(card: VerbCard) {
    Column(
        Modifier
            .fillMaxSize()
            .background(Color(0xFF28303A))
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(\"ます-stem\", color = Color(0xFF9AA0A6), fontSize = 18.sp)
        Spacer(Modifier.height(8.dp))
        Text(
            text = card.stem,
            color = Color.White,
            fontSize = 64.sp,
            lineHeight = 64.sp,
            textAlign = TextAlign.Center,
            fontWeight = FontWeight.Bold
        )
        Spacer(Modifier.height(16.dp))
        Text(
            text = \"（${card.dictionary}）\",
            color = Color(0xFFB0BEC5),
            fontSize = 22.sp
        )
    }
}

@Composable
fun BackFace(card: VerbCard) {
    Column(
        Modifier
            .fillMaxSize()
            .background(Color(0xFF21262C))
            .padding(24.dp),
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = card.meaningEn,
            color = Color.White,
            fontSize = 26.sp,
            fontWeight = FontWeight.SemiBold
        )
        Spacer(Modifier.height(16.dp))
        Entry(\"辞書形\", card.dictionary)
        Entry(\"ます形\", card.masu)
        Entry(\"て形\", card.te)
        Entry(\"た形\", card.ta)
        Entry(\"ない形\", card.nai)
    }
}

@Composable
private fun Entry(label: String, value: String) {
    Row(Modifier.fillMaxWidth().padding(vertical = 6.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(label, color = Color(0xFF9AA0A6), fontSize = 18.sp)
        Text(value, color = Color(0xFFECEFF1), fontSize = 20.sp, fontWeight = FontWeight.Medium)
    }
}
" . -1) (undo-tree-id0 . -9277) (undo-tree-id1 . -8419) (undo-tree-id2 . -9277) 9278 (t 26855 58210 474838 132000)) nil (26855 58838 535729 495000) 0 nil])
([nil nil ((1 . 8176)) nil (26855 58838 535718 471000) 0 nil])
([nil nil ((5620 . 5625) (t 26855 58838 539572 127000)) nil (26855 58948 893630 814000) 0 nil])
([nil nil ((5625 . 5690)) nil (26855 58948 893630 288000) 0 nil])
([nil nil (("    val cameraDistance = 16 * Density(1f).density
" . -5571) (undo-tree-id0 . -50) (undo-tree-id1 . -49) (undo-tree-id2 . -49) (undo-tree-id3 . -49) (undo-tree-id4 . -49) (undo-tree-id5 . -49) (undo-tree-id6 . 1) 5621) nil (26858 38145 241108 893000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1693 . 1694) (nil fontified nil 1460 . 1694) (1460 . 1694) (t 26855 58948 894809 104000)) nil (26858 38352 539917 236000) 0 nil] [nil nil ((1 . 2) (t 26855 58948 894809 104000)) ((#("^" 0 1 (fontified t)) . 1) (undo-tree-id0 . -1)) (26858 38145 240834 4000) 0 nil])
([nil nil ((apply -27 1694 1905 undo--wrap-and-run-primitive-undo 1694 1905 ((1899 . 1902) (1875 . 1878) (1852 . 1855) (1829 . 1832) (1804 . 1807) (1774 . 1777) (1749 . 1752) (1718 . 1721) (1694 . 1697) 1877))) nil (26858 38352 539916 655000) 0 nil])
nil
([nil nil ((#("// data class VerbCard(
//     val dictionary: String,
//     val stem: String,
//     val meaningEn: String,
//     val masu: String,
//     val te: String,
//     val ta: String,
//     val nai: String,
// )
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 7 (face font-lock-comment-face fontified t) 7 8 (face font-lock-comment-face fontified t) 8 13 (face font-lock-comment-face fontified t) 13 14 (face font-lock-comment-face fontified t) 14 22 (face font-lock-comment-face fontified t) 22 24 (face font-lock-comment-face fontified t) 24 27 (face font-lock-comment-delimiter-face fontified t) 27 31 (face font-lock-comment-delimiter-face fontified t) 31 34 (face font-lock-comment-face fontified t) 34 35 (face font-lock-comment-face fontified t) 35 45 (face font-lock-variable-name-face fontified t) 45 47 (face font-lock-comment-face fontified t) 47 53 (face font-lock-comment-face fontified t) 53 55 (face font-lock-comment-face fontified t) 55 58 (face font-lock-comment-delimiter-face fontified t) 58 62 (face font-lock-comment-delimiter-face fontified t) 62 65 (face font-lock-comment-face fontified t) 65 66 (face font-lock-comment-face fontified t) 66 70 (face font-lock-variable-name-face fontified t) 70 72 (face font-lock-comment-face fontified t) 72 78 (face font-lock-comment-face fontified t) 78 80 (face font-lock-comment-face fontified t) 80 83 (face font-lock-comment-delimiter-face fontified t) 83 87 (face font-lock-comment-delimiter-face fontified t) 87 90 (face font-lock-comment-face fontified t) 90 91 (face font-lock-comment-face fontified t) 91 100 (face font-lock-variable-name-face fontified t) 100 102 (face font-lock-comment-face fontified t) 102 108 (face font-lock-comment-face fontified t) 108 110 (face font-lock-comment-face fontified t) 110 113 (face font-lock-comment-delimiter-face fontified t) 113 117 (face font-lock-comment-delimiter-face fontified t) 117 120 (face font-lock-comment-face fontified t) 120 121 (face font-lock-comment-face fontified t) 121 125 (face font-lock-variable-name-face fontified t) 125 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-face fontified t) 133 135 (face font-lock-comment-face fontified t) 135 138 (face font-lock-comment-delimiter-face fontified t) 138 142 (face font-lock-comment-delimiter-face fontified t) 142 145 (face font-lock-comment-face fontified t) 145 146 (face font-lock-comment-face fontified t) 146 148 (face font-lock-variable-name-face fontified t) 148 150 (face font-lock-comment-face fontified t) 150 156 (face font-lock-comment-face fontified t) 156 158 (face font-lock-comment-face fontified t) 158 161 (face font-lock-comment-delimiter-face fontified t) 161 165 (face font-lock-comment-delimiter-face fontified t) 165 168 (face font-lock-comment-face fontified t) 168 169 (face font-lock-comment-face fontified t) 169 171 (face font-lock-variable-name-face fontified t) 171 173 (face font-lock-comment-face fontified t) 173 179 (face font-lock-comment-face fontified t) 179 181 (face font-lock-comment-face fontified t) 181 184 (face font-lock-comment-delimiter-face fontified t) 184 188 (face font-lock-comment-delimiter-face fontified t) 188 191 (face font-lock-comment-face fontified t) 191 192 (face font-lock-comment-face fontified t) 192 195 (face font-lock-variable-name-face fontified t) 195 197 (face font-lock-comment-face fontified t) 197 203 (face font-lock-comment-face fontified t) 203 205 (face font-lock-comment-face fontified t) 205 208 (face font-lock-comment-delimiter-face fontified t) 208 210 (face font-lock-comment-face fontified t)) . -1694) (undo-tree-id0 . -210) (undo-tree-id1 . -12) (undo-tree-id2 . -12) (undo-tree-id3 . -12) (undo-tree-id4 . -13) (undo-tree-id5 . -13) (undo-tree-id6 . -13) (undo-tree-id7 . -13) (undo-tree-id8 . -13) (undo-tree-id9 . -13) (undo-tree-id10 . -135) (undo-tree-id11 . -210) (undo-tree-id12 . -210) (undo-tree-id13 . -210) 1904) nil (26858 38352 539915 688000) 0 nil])
([nil nil ((1694 . 1695)) nil (26858 38352 539898 642000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2358 . 2359) (nil fontified nil 1695 . 2359) (1695 . 2359)) nil (26858 38352 539898 55000) 0 nil])
([nil nil ((apply -63 2360 3729 undo--wrap-and-run-primitive-undo 2360 3729 ((3723 . 3726) (3654 . 3657) (3579 . 3582) (3508 . 3511) (3434 . 3437) (3368 . 3371) (3299 . 3302) (3229 . 3232) (3159 . 3162) (3090 . 3093) (3019 . 3022) (2941 . 2944) (2870 . 2873) (2799 . 2802) (2729 . 2732) (2657 . 2660) (2587 . 2590) (2524 . 2527) (2456 . 2459) (2388 . 2391) (2360 . 2363) 3665))) nil (26858 38352 539894 559000) 0 nil])
([nil nil ((3776 . 3778) (t 26858 38352 542216 977000)) nil (26858 38397 508020 721000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4327 . 4328) (nil fontified nil 3778 . 4328) (3778 . 4328)) nil (26858 38397 508020 61000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . -3776) (undo-tree-id14 . -1) (undo-tree-id15 . 1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 3777) nil (26858 38397 508017 153000) 0 nil])
([nil nil ((7723 . 7724) (t 26858 38397 509909 102000)) nil (26858 38428 751057 947000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8102 . 8103) (nil fontified nil 7723 . 8103) (7723 . 8103)) nil (26858 38428 751057 492000) 0 nil])
([nil nil ((apply -84 8104 8999 undo--wrap-and-run-primitive-undo 8104 8999 ((8993 . 8996) (8984 . 8987) (8971 . 8974) (8939 . 8942) (8897 . 8900) (8851 . 8854) (8834 . 8837) (8792 . 8795) (8779 . 8782) (8735 . 8738) (8690 . 8693) (8655 . 8658) (8622 . 8625) (8586 . 8589) (8553 . 8556) (8536 . 8539) (8495 . 8498) (8423 . 8426) (8412 . 8415) (8360 . 8363) (8297 . 8300) (8265 . 8268) (8219 . 8222) (8189 . 8192) (8169 . 8172) (8154 . 8157) (8119 . 8122) (8104 . 8107) 8914))) nil (26858 38428 751150 651000) 0 nil])
([nil nil ((8999 . 9000)) nil (26858 38448 591100 195000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 8998) (undo-tree-id19 . -1)) ((8998 . 8999)) (26858 38428 751054 298000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9600 . 9601) (nil fontified nil 8999 . 9601) (8999 . 9601)) nil (26858 38448 591099 531000) 0 nil])
nil
([nil current ((apply -69 9601 10273 undo--wrap-and-run-primitive-undo 9601 10273 ((10267 . 10270) (10258 . 10261) (10224 . 10227) (10192 . 10195) (10160 . 10163) (10125 . 10128) (10084 . 10087) (10042 . 10045) (10029 . 10032) (9981 . 9984) (9948 . 9951) (9912 . 9915) (9874 . 9877) (9857 . 9860) (9846 . 9849) (9794 . 9797) (9762 . 9765) (9716 . 9719) (9686 . 9689) (9666 . 9669) (9651 . 9654) (9617 . 9620) (9602 . 9605) 10203))) nil (26858 38448 591095 769000) 0 nil])
nil
